/* this file is generated by concat task of grunt.js */
var Hydranger;

Hydranger = function() {
  'use strict';
  var args, callback, i, max, modules;
  args = Array.prototype.slice.call(arguments);
  callback = args.pop();
  modules = (args[0] && typeof args[0] === "string" ? args : args[0]);
  i = void 0;
  if (!(this instanceof Hydranger)) {
    return new Hydranger(modules, callback);
  }
  if (!modules || modules[0] === "*") {
    modules = [];
    for (i in Hydranger.modules) {
      if (Hydranger.modules.hasOwnProperty(i)) {
        modules.push(i);
      }
    }
  }
  i = 0;
  max = modules.length;
  while (i < max) {
    Hydranger.modules[modules[i]](this);
    i++;
  }
  callback(this);
};

Hydranger.modules = {};

Hydranger.modules.core = function(self) {
  'use strict';
  self.onload = function(e) {
    if (window.addEventListener) {
      window.addEventListener("load", e, false);
    } else if (window.attachEvent) {
      window.attachEvent("onload", e);
    } else if (window.jQuery) {
      window.jQuery("document").ready(function() {
        return e();
      });
    } else {
      window.onload = e;
    }
  };
};

Hydranger.modules.dom = function(self) {
  self.dom = {};
  self.dom.getById = function() {};
};

Hydranger.modules.net = function(self) {
  'use strict';
  self.net = {};
  self.net.getContents = function(url, callback) {
    var my, xhr;
    my = self.net;
    xhr = new XMLHttpRequest();
    xhr.open("get", url, true);
    xhr.onload = function() {
      var data;
      data = my.parseJSON(this.responseText);
      callback(data);
    };
    xhr.send(null);
  };
  self.net.getJSON = function(url, callback) {
    var my;
    my = self.net;
    my.getContents(url, function(data) {
      callback(data);
    });
  };
  self.net.parseJSON = function(data) {
    var e, parsed;
    try {
      parsed = JSON.parse(data);
      return parsed;
    } catch (_error) {
      e = _error;
      console.log(e);
    }
    parsed = (new Function("return " + data))();
    return parsed;
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.autoload = function(self) {
  'use strict';
  self.autoload = {};
  self.autoload.config = {};
  self.autoload.config.common = {
    targetId: "autoload",
    preload: "preload",
    postload: "postload"
  };
  self.autoload.init = function() {
    var common, my;
    my = self.autoload;
    common = my.config.common;
    my.loader(common.preload);
  };
  self.autoload.finishPreload = function() {
    var common, my;
    my = self.autoload;
    common = my.config.common;
    my.loader(common.postload);
  };
  self.autoload.loader = function(dataname) {
    var common, key, loadings, module_name, my;
    my = self.autoload;
    common = my.config.common;
    my.el = document.getElementById(common.targetId);
    loadings = my.el.dataset[dataname];
    if (typeof loadings === "undefined") {
      return false;
    }
    loadings = loadings.split(" ");
    for (key in loadings) {
      if (!__hasProp.call(loadings, key)) continue;
      module_name = loadings[key];
      if (typeof self[module_name] === "undefined" || typeof self[module_name].init !== "function") {
        continue;
      }
      self[module_name].init();
    }
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.base = function(self) {
  self.project = {};
  self.project.config = {
    targetNode: '#project-list',
    selected_class: 'current-icon',
    actionNode: "#widget-actions"
  };
  self.project.config.calcdata = {
    targetNode: self.project.config.targetNode,
    targetRows: 'td.row-calc',
    data_name: 'revenue',
    view_price: '#project-calc-revenue p.summary-figure',
    view_count: '#project-calc-count p.summary-figure'
  };
  self.project.config.list = {
    attr: "a[href$=\"#unfixed\"]",
    hides: ['tr.project-unfixed', 'tr.project-failed'],
    class_name: 'row-hide',
    show: false,
    selected: self.project.config.selected_class,
    text: {
      show: 'On',
      hide: 'Off'
    }
  };
  self.project.init = function() {
    var my;
    my = self.project;
    my.actionResearchProject();
    my.doModal();
    my.downloadTemplate();
    my.toggleFileDelete();
  };
  self.projecttable = {};
  self.projecttable.init = function() {
    var my;
    my = self.project;
    my.toggleListProject();
    my.tablesorter();
    my.toggleExtend();
    my.toggleType();
    my.doModal();
    my.setCalcData();
    my.jumpDate();
  };
  self.project.setCalcData = function() {
    var $node, $view_count, $view_price, config, my, target;
    my = self.project;
    config = my.config.calcdata;
    target = config.targetRows;
    $view_price = $(config.view_price);
    $view_count = $(config.view_count);
    $node = $(config.targetNode);
    $node.on('setCalcData', function(e) {
      var $target, sum;
      sum = 0;
      $target = $node.find(target + ':visible');
      $target.each(function() {
        var val;
        val = $(this).data(config.data_name);
        sum = sum + val;
      });
      sum = String(sum).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      $view_price.html('￥' + sum);
      return $view_count.html($target.length + '件');
    });
    $node.trigger('setCalcData');
  };
  self.project.getActions = function() {
    var config, key, modals, my, nodes, value, _ref;
    my = self.project;
    config = my.config.actions;
    nodes = [];
    _ref = config.items;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      nodes.push(value.attr);
    }
    modals = my.config.modal;
    for (key in modals) {
      if (!__hasProp.call(modals, key)) continue;
      value = modals[key];
      nodes.push(value.attr);
    }
    return nodes;
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.configManager = function(self) {
  'use strict';
  self.configManager = {};
  self.configManager.config = {};
  self.configManager.config.common = {
    targetNode: function() {
      return self.autoload.el;
    }
  };
  self.configManager.init = function() {
    var my;
    my = self.configManager;
    my.loadConfig();
  };
  self.configManager.loadConfig = function() {
    var common, el, my, url;
    my = self.configManager;
    common = my.config.common;
    el = common.targetNode();
    url = el.dataset.config;
    self.net.getJSON(url, function(data) {
      self.conf = data;
      self.autoload.finishPreload();
      my.setConfig();
    });
  };
  self.configManager.setConfig = function() {
    var bind, data, key, value, _ref, _ref1;
    data = self.conf;
    bind = self.binding.config.common;
    _ref = data.list;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      bind.sidebars.push(value);
    }
    _ref1 = data.header;
    for (key in _ref1) {
      if (!__hasProp.call(_ref1, key)) continue;
      value = _ref1[key];
      if (!value.name) {
        value.name = value.column;
      }
      bind.listheaders.push(value);
    }
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.gss = function(self) {
  self.project = {};
  self.project.config = {
    targetNode: '#project-list',
    selected_class: 'current-icon',
    actionNode: "#widget-actions"
  };
  self.project.config.calcdata = {
    targetNode: self.project.config.targetNode,
    targetRows: 'td.row-calc',
    data_name: 'revenue',
    view_price: '#project-calc-revenue p.summary-figure',
    view_count: '#project-calc-count p.summary-figure'
  };
  self.project.config.list = {
    attr: "a[href$=\"#unfixed\"]",
    hides: ['tr.project-unfixed', 'tr.project-failed'],
    class_name: 'row-hide',
    show: false,
    selected: self.project.config.selected_class,
    text: {
      show: 'On',
      hide: 'Off'
    }
  };
  self.project.config.extend = {
    attr: "a[href$=\"#extended\"]",
    targetRows: 'th.row-extend',
    show: false,
    selected: self.project.config.selected_class,
    text: {
      show: 'On',
      hide: 'Off'
    }
  };
  self.project.config.toggleType = {
    selected_class: 'current-url',
    class_name: 'row-hidden',
    targets: {
      all: {
        attr: "a[href$=\"#all\"]",
        showRow: 'tr',
        text: {
          show: '',
          hide: ''
        }
      },
      research: {
        attr: "a[href$=\"#research\"]",
        showRow: 'tr.project-research',
        text: {
          show: '',
          hide: ''
        }
      },
      general: {
        attr: "a[href$=\"#general\"]",
        showRow: 'tr.project-general',
        text: {
          show: '',
          hide: ''
        }
      }
    }
  };
  self.project.config.modal = {
    search: {
      attr: "a[href$=\"#search\"]",
      form: '/modal/project/search',
      width: 800,
      height: 700
    },
    failed: {
      attr: "a[href$=\"#failed\"]",
      form: '/modal/project/failed',
      width: 400,
      height: 450
    },
    change_project: {
      actionNode: '#management-action',
      attr: "a[href$=\"#change_project\"]",
      form: '/modal/management/project',
      width: 400,
      height: 450
    },
    change_quotation: {
      actionNode: '#management-action',
      attr: "a[href$=\"#change_quota\"]",
      form: '/modal/management/quotation',
      width: 400,
      height: 550
    },
    outsource: {
      actionNode: '#outsource-action',
      attr: "a[href$=\"#outsource\"]",
      form: '/modal/project/outsource',
      width: 500,
      height: 730
    }
  };
  self.project.config.actions = {
    project_id: null,
    replace_path: ["/project/info/", "/research/info/"],
    targetNode: "#widget-actions"
  };
  self.project.config.actions.items = {
    start: {
      attr: "a[href$=\"#start\"]",
      url: "/api/v1/research/start",
      confirm_msg: "案件を開始しますか",
      message: "案件を開始しました"
    },
    inspect: {
      attr: "a[href$=\"#inspect\"]",
      url: "/api/v1/research/inspect",
      confirm_msg: "検収を開始しますか",
      message: "検収を開始しました"
    },
    request: {
      attr: "a[href$=\"#request\"]",
      url: "/api/v1/project/request",
      confirm_msg: "請求を依頼しますか",
      message: "請求を依頼しました"
    },
    payment_wait: {
      attr: "a[href$=\"#payment_wait\"]",
      url: "/api/v1/project/payment_wait",
      confirm_msg: "請求待ちにしますか",
      message: "請求待ちにしました"
    },
    order: {
      attr: "a[href$=\"#ordered\"]",
      url: "/api/v1/project/order",
      confirm_msg: "受注確定にしますか",
      message: "受注確定になりました"
    }
  };
  self.project.config.jumpDate = {
    actionNode: '#show-date',
    url: '/project/all',
    option: {
      language: 'ja',
      format: 'yyyy-mm',
      minViewMode: 'months',
      startView: 'year',
      autoclose: true,
      todayHighlight: true
    }
  };
  self.project.config.downloadTemplate = {
    actionNode: '#currency_type_id',
    targetNode: '#download-quota'
  };
  self.project.config.toggleFileDelete = {
    remove: {
      attr: "a[href$=\"#file_delete\"]",
      url: "/research/delete_upload",
      confirm_msg: "ファイルを削除しますか",
      targetNode: '#research-files'
    },
    recover: {
      attr: "a[href$=\"#file_recover\"]",
      url: "/research/recover_upload",
      confirm_msg: "ファイルを元に戻しますか",
      targetNode: '#research-files'
    }
  };
  self.project.init = function() {
    var my;
    my = self.project;
    my.actionResearchProject();
    my.doModal();
    my.downloadTemplate();
    my.toggleFileDelete();
  };
  self.projecttable = {};
  self.projecttable.init = function() {
    var my;
    my = self.project;
    my.toggleListProject();
    my.tablesorter();
    my.toggleExtend();
    my.toggleType();
    my.doModal();
    my.setCalcData();
    my.jumpDate();
  };
  self.project.setCalcData = function() {
    var $node, $view_count, $view_price, config, my, target;
    my = self.project;
    config = my.config.calcdata;
    target = config.targetRows;
    $view_price = $(config.view_price);
    $view_count = $(config.view_count);
    $node = $(config.targetNode);
    $node.on('setCalcData', function(e) {
      var $target, sum;
      sum = 0;
      $target = $node.find(target + ':visible');
      $target.each(function() {
        var val;
        val = $(this).data(config.data_name);
        sum = sum + val;
      });
      sum = String(sum).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      $view_price.html('￥' + sum);
      return $view_count.html($target.length + '件');
    });
    $node.trigger('setCalcData');
  };
  self.project.getActions = function() {
    var config, key, modals, my, nodes, value, _ref;
    my = self.project;
    config = my.config.actions;
    nodes = [];
    _ref = config.items;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      nodes.push(value.attr);
    }
    modals = my.config.modal;
    for (key in modals) {
      if (!__hasProp.call(modals, key)) continue;
      value = modals[key];
      nodes.push(value.attr);
    }
    return nodes;
  };
  self.project.actionResearchProject = function() {
    var actions, config, key, my, node, value;
    my = self.project;
    config = my.config.actions;
    node = config.targetNode;
    actions = config.items;
    for (key in actions) {
      if (!__hasProp.call(actions, key)) continue;
      value = actions[key];
      $(node).find(value.attr).click((function() {
        var v;
        v = value;
        return function(e) {
          my.actionResearchProjectEvent(e, v);
        };
      })());
    }
  };
  self.project.actionResearchProjectEvent = function(e, action) {
    var config, elm, key, my, params, paths, replaced_path, target, value;
    my = self.project;
    config = my.config.actions;
    elm = e.target;
    if (elm.tagName !== "A") {
      elm = $(elm).closest("A").get(0);
    }
    if (self.string.checkLinkURI(elm) !== true) {
      return;
    }
    target = ($.support.boxModel ? (navigator.appName.match(/Opera/) ? "html" : "html,body") : "body");
    $(target).queue([]).stop();
    e.preventDefault();
    e.stopPropagation();
    replaced_path = self.string.getPathName(elm);
    paths = config.replace_path;
    for (key in paths) {
      if (!__hasProp.call(paths, key)) continue;
      value = paths[key];
      replaced_path = replaced_path.replace(value, "");
    }
    config.project_id = replaced_path;
    params = {
      mode: "check",
      id: config.project_id
    };
    my.actionResearchProjectCallApi(params, action);
    return false;
  };
  self.project.actionResearchProjectCallApi = function(params, action, callback) {
    var my;
    my = self.project;
    if (typeof callback === "undefined") {
      callback = my.actionResearchProjectCallback;
    }
    self.callURL(action.url, params, callback);
  };
  self.project.actionResearchProjectCallback = function(result) {
    var action, config, items, msg, my, params;
    my = self.project;
    config = my.config.actions;
    action = config.items[result.action];
    if (result.status === false) {
      msg = "下記項目を設定して下さい. \n\n";
      items = result.errors.join("\n");
      alert(msg + items);
    } else {
      msg = action.confirm_msg + ". \n";
      if (confirm(msg)) {
        params = {
          mode: result.mode,
          id: config.project_id
        };
        my.actionResearchProjectCallApi(params, action, my.actionResearchProjectSuccess);
      }
    }
  };
  self.project.actionResearchProjectSuccess = function(result) {
    var action, config, my;
    my = self.project;
    config = my.config.actions;
    action = config.items[result.action];
    alert(action.message);
    location.reload(false);
  };
  self.project.toggleListProject = function() {
    var action, class_name, config, items, my, node, selected;
    my = self.project;
    config = my.config.list;
    node = my.config.targetNode;
    class_name = config.class_name;
    items = config.hides.join(",");
    selected = config.selected_class;
    action = my.config.actions.targetNode;
    $(action).find(config.attr).click((function() {
      return function(e) {
        var elm, targets;
        e.preventDefault();
        elm = e.target;
        if (elm.tagName !== "A") {
          elm = $(elm).closest("A").get(0);
        }
        my.toggleIcon(elm, config);
        targets = $(node).find(items);
        targets.toggleClass(class_name);
        $(node).trigger('setCalcData');
      };
    })());
  };
  self.project.tablesorter = function() {
    var config, exp, exp3, my, node, symbols;
    my = self.project;
    config = my.config.list;
    node = config.targetNode;
    exp = new RegExp('^[￥]');
    symbols = '£$€';
    exp3 = new RegExp('^[' + symbols + ']| EUR');
    $.tablesorter.addParser({
      id: "currency2",
      is: function(s) {
        return exp.test(s);
      },
      format: function(s) {
        s = s.replace(/,/g, '');
        return $.tablesorter.formatFloat(s.replace(exp, ""));
      },
      type: "numeric"
    });
    $.tablesorter.addParser({
      id: "currency3",
      is: function(s) {
        return exp3.test(s);
      },
      format: function(s) {
        s = s.replace(/(,|\.|\$|EUR)/g, '');
        return $.tablesorter.formatFloat(s.replace(exp, ""));
      },
      type: "numeric"
    });
    $.extend($.tablesorter.themes.bootstrap, {
      table: 'table table-tight table-bordered',
      header: '',
      footerRow: '',
      footerCells: '',
      icons: 'icon-white',
      sortNone: 'bootstrap-icon-unsorted',
      sortAsc: 'icon-chevron-up',
      sortDesc: 'icon-chevron-down',
      active: '',
      hover: '',
      filterRow: '',
      even: '',
      odd: ''
    });
    $("table").tablesorter({
      theme: "bootstrap",
      widthFixed: false,
      headers: {
        10: 'currency2',
        11: 'currency3',
        12: 'currency2',
        13: 'currency2'
      },
      headerTemplate: '{content} {icon}',
      widgets: ["uitheme", "filter", "zebra"],
      widgetOptions: {
        zebra: ["even", "odd"],
        filter_reset: ".reset"
      }
    });
  };
  self.project.toggleExtend = function() {
    var action, config, indexes, my, node;
    my = self.project;
    config = my.config.extend;
    node = my.config.targetNode;
    indexes = [];
    $(node).find(config.targetRows).each(function() {
      var i;
      i = $(this).index();
      if (isFinite(i)) {
        indexes.push('th:eq(' + i + ')');
        indexes.push('td:eq(' + i + ')');
      }
    });
    action = my.config.actions.targetNode;
    $(action).find(config.attr).click((function() {
      return function(e) {
        var elm;
        e.preventDefault();
        elm = e.target;
        if (elm.tagName !== "A") {
          elm = $(elm).closest("A").get(0);
        }
        my.toggleIcon(elm, config);
        $('tr', node).find(indexes.join(",")).toggle();
      };
    })());
    $(action).find(config.attr).trigger('click');
  };
  self.project.toggleIcon = function(elm, config) {
    var text, text_from, text_to;
    if (config.show === true) {
      text_from = config.text.show;
      text_to = config.text.hide;
      config.show = false;
    } else {
      text_from = config.text.hide;
      text_to = config.text.show;
      config.show = true;
    }
    text = $(elm).html().replace(text_from, text_to);
    $(elm).html(text).toggleClass(config.selected);
  };
  self.project.toggleType = function() {
    var action, class_name, config, configs, key, my, node, selected, _ref;
    my = self.project;
    configs = my.config.toggleType;
    selected = configs.selected_class;
    class_name = configs.class_name;
    node = my.config.targetNode;
    action = my.config.actionNode;
    _ref = configs.targets;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      config = _ref[key];
      $(action).find(config.attr).click((function() {
        var v;
        v = config;
        return function(e) {
          var elm, shows;
          e.preventDefault();
          elm = e.target;
          if (elm.tagName !== "A") {
            elm = $(elm).closest("A").get(0);
          }
          my.toggleIcon(elm, v);
          shows = v.showRow;
          $('tbody tr:not(' + shows + ')', node).addClass(class_name);
          $('tbody ' + shows, node).removeClass(class_name);
          $(action).find('.' + selected).removeClass(selected);
          $(elm).addClass(selected).find('i').addClass(selected);
          $(node).trigger('setCalcData');
        };
      })());
    }
  };
  self.project.doModal = function() {
    var conf;
    conf = self.project.config;
    conf.modal.search.form = conf.modal.search.form + window.location.search;
    self.modal["do"](conf);
  };
  self.project.jumpDate = function() {
    var $node, config, my, option;
    my = self.project;
    config = my.config.jumpDate;
    option = config.option;
    $node = $(config.actionNode);
    $node.datepicker(option).on('changeDate', function(e) {
      var new_date, val;
      val = $node.data('date');
      new_date = val.replace("-", "/");
      return location.href = config.url + "/" + new_date;
    });
  };
  self.project.downloadTemplate = function() {
    var $node, $target, config, my;
    my = self.project;
    config = my.config.downloadTemplate;
    $target = $(config.targetNode);
    if ($target.length < 1) {
      return;
    }
    config.url = $target[0].href;
    config.title = $target.html();
    $node = $(config.actionNode);
    $node.on('change', function(e) {
      var op;
      op = this.options;
      $target[0].href = config.url + '/' + op[op.selectedIndex].value;
      return $target.html(config.title + ' (' + $(op[op.selectedIndex]).data('name') + ')');
    });
  };
  self.project.toggleFileDelete = function() {
    var $target, config, configs, key, my;
    my = self.project;
    configs = my.config.toggleFileDelete;
    for (key in configs) {
      if (!__hasProp.call(configs, key)) continue;
      config = configs[key];
      $target = $(config.targetNode);
      if ($target.length < 1) {
        return;
      }
      $target.find(config.attr).click((function() {
        var v;
        v = config;
        return function(e) {
          var elm, params;
          e.preventDefault();
          elm = e.target;
          if (elm.tagName !== "A") {
            elm = $(elm).closest("A").get(0);
          }
          if (window.confirm(v.confirm_msg)) {
            params = $(elm).data();
            my.actionPost(v.url, params);
          }
        };
      })());
    }
  };
  self.project.actionPost = function(url, params) {
    var form, input, key, param, token;
    token = $("input[name=\"csrf_token\"]").val();
    form = document.createElement("form");
    form.setAttribute("action", url);
    form.setAttribute("method", "post");
    form.style.display = "none";
    document.body.appendChild(form);
    if (Object.keys(params).length > 0) {
      for (key in params) {
        param = params[key];
        input = document.createElement("input");
        input.setAttribute("type", "hidden");
        input.setAttribute("name", key);
        input.setAttribute("value", param);
        $(form).append(input);
      }
      input = document.createElement("input");
      input.setAttribute("name", "csrf_token");
      input.setAttribute("value", token);
      form.appendChild(input);
      form.submit();
    }
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.gss = function(self) {
  self.project = {};
  self.project.config = {
    targetNode: '#project-list',
    selected_class: 'current-icon',
    actionNode: "#widget-actions"
  };
  self.project.config.calcdata = {
    targetNode: self.project.config.targetNode,
    targetRows: 'td.row-calc',
    data_name: 'revenue',
    view_price: '#project-calc-revenue p.summary-figure',
    view_count: '#project-calc-count p.summary-figure'
  };
  self.project.config.list = {
    attr: "a[href$=\"#unfixed\"]",
    hides: ['tr.project-unfixed', 'tr.project-failed'],
    class_name: 'row-hide',
    show: false,
    selected: self.project.config.selected_class,
    text: {
      show: 'On',
      hide: 'Off'
    }
  };
  self.project.init = function() {
    var my;
    my = self.project;
    my.actionResearchProject();
    my.doModal();
    my.downloadTemplate();
    my.toggleFileDelete();
  };
  self.projecttable = {};
  self.projecttable.init = function() {
    var my;
    my = self.project;
    my.toggleListProject();
    my.tablesorter();
    my.toggleExtend();
    my.toggleType();
    my.doModal();
    my.setCalcData();
    my.jumpDate();
  };
  self.project.setCalcData = function() {
    var $node, $view_count, $view_price, config, my, target;
    my = self.project;
    config = my.config.calcdata;
    target = config.targetRows;
    $view_price = $(config.view_price);
    $view_count = $(config.view_count);
    $node = $(config.targetNode);
    $node.on('setCalcData', function(e) {
      var $target, sum;
      sum = 0;
      $target = $node.find(target + ':visible');
      $target.each(function() {
        var val;
        val = $(this).data(config.data_name);
        sum = sum + val;
      });
      sum = String(sum).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      $view_price.html('￥' + sum);
      return $view_count.html($target.length + '件');
    });
    $node.trigger('setCalcData');
  };
  self.project.getActions = function() {
    var config, key, modals, my, nodes, value, _ref;
    my = self.project;
    config = my.config.actions;
    nodes = [];
    _ref = config.items;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      nodes.push(value.attr);
    }
    modals = my.config.modal;
    for (key in modals) {
      if (!__hasProp.call(modals, key)) continue;
      value = modals[key];
      nodes.push(value.attr);
    }
    return nodes;
  };
};

Hydranger.modules.view = function(self) {
  self.view = {};
  self.view.config = {};
  self.view.config.enableEditButton = {
    baseURL: 'https://docs.google.com/spreadsheet/ccc',
    targetNode: 'hr-edit-button'
  };
  self.view.init = function() {
    var my;
    my = self.view;
    my.enableEditButton();
  };
  self.view.enableEditButton = function() {
    var config, el, my, url;
    my = self.view;
    config = my.config.enableEditButton;
    el = document.getElementById(config.targetNode);
    url = config.baseURL + "?key=" + self.conf.key;
    el.setAttribute("href", url);
    el.removeAttribute("disabled");
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.binding = function(self) {
  'use strict';
  self.binding = {};
  self.binding.config = {};
  self.binding.config.common = {
    sidebars: ko.observableArray([]),
    listheaders: ko.observableArray([]),
    listrows: ko.observableArray([]),
    allitems: [],
    filters: ko.observableArray([])
  };
  self.binding.init = function() {
    var my;
    console.log("init bind");
    my = self.binding;
    my.makeBindings();
  };
  self.binding.makeBindings = function() {
    var my;
    my = self.binding;
    ko.applyBindings(new my.ViewModel);
  };
  self.binding.ViewModel = function() {
    var common, my, s;
    my = self.binding;
    common = my.config.common;
    s = this;
    s.sidebars = common.sidebars;
    s.listheaders = common.listheaders;
    s.listrows = ko.computed(function() {
      var filters;
      filters = common.filters;
      if (!filters().length) {
        return common.listrows();
      }
      return ko.utils.arrayFilter(common.listrows(), function(row) {
        var filter, i, _ref;
        _ref = filters();
        for (i in _ref) {
          if (!__hasProp.call(_ref, i)) continue;
          filter = _ref[i];
          if (row[filter.key] !== filter.value) {
            return false;
          }
        }
        return true;
      });
    });
    s.filterRows = my.filterRows;
    s.toggleButton = function(type, item) {
      var btnclass, isMulti, selected;
      isMulti = typeof isMulti === "undefined" ? false : isMulti;
      selected = ko.utils.arrayFirst(common.filters(), function(filter) {
        return filter.key === type && filter.value === item;
      });
      btnclass = selected ? "btn-primary" : "btn-default";
      return btnclass;
    };
  };
  self.binding.updateArray = function(koArray, items) {
    koArray.removeAll();
    ko.utils.arrayPushAll(koArray(), items);
  };
  self.binding.updateRows = function(items) {
    var common, my;
    my = self.binding;
    common = my.config.common;
    common.allitems = items;
    my.updateArray(common.listrows, items);
    common.listrows.valueHasMutated();
  };
  self.binding.updateSidebars = function(items) {
    var common, my;
    my = self.binding;
    common = my.config.common;
    my.updateArray(common.sidebars, items);
    common.sidebars.valueHasMutated();
  };
  return self.binding.filterRows = function(type, item, isMulti) {
    var common, filters, isSelected, my, newFilters, newItem;
    my = self.binding;
    common = my.config.common;
    filters = common.filters;
    isMulti = typeof isMulti === "undefined" ? false : false;
    newItem = {
      key: type,
      value: item,
      multiple: isMulti
    };
    isSelected = false;
    newFilters = ko.utils.arrayFilter(filters(), function(filter) {
      if (filter.key === newItem.key && filter.value === newItem.value) {
        isSelected = true;
        return false;
      }
      if (filter.key === newItem.key && !item.isMulti) {
        return false;
      } else {
        return true;
      }
    });
    if (!isSelected) {
      newFilters.push(newItem);
    }
    my.updateArray(filters, newFilters);
    filters.valueHasMutated();
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.gss = function(self) {
  self.gss = {};
  self.gss.config = {};
  self.gss.config.common = {
    key: function() {
      return self.conf.key;
    }
  };
  self.gss.init = function() {
    var my;
    my = self.gss;
    my.getSheet();
  };
  self.gss.getSheet = function() {
    var columns, common, key, my, sheet, sheetkey, value, _ref;
    my = self.gss;
    common = my.config.common;
    sheetkey = common.key();
    columns = [];
    _ref = self.conf.header;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      columns.push("%" + value.column + "%");
    }
    sheet = new SpreadsheetRenderer({
      'key': sheetkey,
      'pub': false,
      'gid': 0,
      'headers': 1,
      'template': columns.join("\t")
    });
    sheet.render('select * ', function(list) {
      return my.updateRows(list);
    });
  };
  self.gss.updateRows = function(list) {
    var bind, headers, i, row, rows, values;
    bind = self.binding.config.common;
    rows = bind.listrows;
    headers = [];
    for (i in list) {
      if (!__hasProp.call(list, i)) continue;
      values = list[i];
      row = [];
      values = values.split("\t");
      rows.push(values);
    }
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.gss = function(self) {
  'use strict';
  self.gss = {};
  self.gss.config = {};
  self.gss.config.common = {
    key: function() {
      return self.conf.key;
    }
  };
  self.gss.init = function() {
    var my;
    my = self.gss;
    my.getSheet();
  };
  self.gss.getSheet = function() {
    var columns, common, key, my, sheet, sheetkey, value, _ref;
    my = self.gss;
    common = my.config.common;
    sheetkey = common.key();
    columns = [];
    _ref = self.conf.header;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      columns.push("%" + value.column + "%");
    }
    sheet = new SpreadsheetRenderer({
      'key': sheetkey,
      'pub': false,
      'gid': 0,
      'headers': 1,
      'template': columns.join("\t")
    });
    sheet.render('select * ', function(list) {
      return my.updateRows(list);
    });
  };
  self.gss.updateRows = function(list) {
    var column, headers, i, item, items, j, k, row, rows, side, sidebar_columns, sidebar_items, sidebars, title, value, values, _ref;
    sidebar_items = {};
    sidebar_columns = self.conf.list;
    for (j in sidebar_columns) {
      if (!__hasProp.call(sidebar_columns, j)) continue;
      column = sidebar_columns[j];
      sidebar_items[column] = {};
    }
    headers = [];
    _ref = self.conf.header;
    for (j in _ref) {
      if (!__hasProp.call(_ref, j)) continue;
      value = _ref[j];
      headers.push(value.column);
    }
    rows = [];
    for (i in list) {
      if (!__hasProp.call(list, i)) continue;
      values = list[i];
      row = {};
      row.id = i;
      values = values.split("\t");
      for (j in headers) {
        if (!__hasProp.call(headers, j)) continue;
        title = headers[j];
        row[title] = values[j];
      }
      for (j in sidebar_columns) {
        if (!__hasProp.call(sidebar_columns, j)) continue;
        side = sidebar_columns[j];
        item = row[side];
        sidebar_items[side][item] = 1;
      }
      rows.push(row);
    }
    sidebars = [];
    for (column in sidebar_items) {
      if (!__hasProp.call(sidebar_items, column)) continue;
      j = sidebar_items[column];
      items = [];
      for (item in j) {
        if (!__hasProp.call(j, item)) continue;
        k = j[item];
        items.push(item);
      }
      sidebars.push({
        "name": column,
        "items": items
      });
    }
    console.log(sidebars);
    self.binding.updateRows(rows);
    self.binding.updateSidebars(sidebars);
    self.indexeddb.insert(rows);
  };
};

var __hasProp = {}.hasOwnProperty;

Hydranger.modules.indexeddb = function(self) {
  'use strict';
  self.indexeddb = {};
  self.indexeddb.config = {};
  self.indexeddb.config.common = {
    db: null,
    dbname: "hydranger",
    version: 1
  };
  self.indexeddb.init = function() {
    var my;
    my = self.indexeddb;
    my.open();
  };
  self.indexeddb.open = function(callback) {
    var common, dbh, my;
    my = self.indexeddb;
    common = my.config.common;
    dbh = indexedDB.open(common.dbname, common.version);
    dbh.onerror = function(e) {
      console.log("Error: Indexed DB Open; Error-Code = " + e.target.errorCode);
    };
    dbh.onsuccess = function(e) {
      common.db = e.target.result;
      if (typeof callback === "function") {
        callback();
      }
    };
    dbh.onupgradeneeded = function(e) {
      var db, store;
      e.currentTarget.transaction.onerror = indexedDB.onerror;
      db = e.currentTarget.result;
      if (db.objectStoreNames.contains("items")) {
        db.deleteObjectStore("items");
        console.log("deleted");
      }
      store = db.createObjectStore("items", {
        keyPath: "id"
      });
      store.createIndex("nameIndex", "name", {
        unique: false
      });
      my.createIndexes(store);
    };
  };
  self.indexeddb.createIndexes = function(store) {
    var key, value, _ref;
    _ref = self.conf.list;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      value = _ref[key];
      store.createIndex(value, value, {
        unique: false
      });
    }
  };
  self.indexeddb.insert = function(data) {
    var common, db, key, my, request, store, trans, value;
    my = self.indexeddb;
    common = my.config.common;
    db = common.db;
    if (!!common.db === false) {
      my.open(function() {
        my.insert(data);
      });
      return;
    }
    trans = db.transaction(["items"], "readwrite");
    store = trans.objectStore("items");
    store.onerror = function(e) {
      console.log("Error: Indexed DB Insert store; Error-Code = " + e.target.errorCode);
    };
    store.onsuccess = function(e) {};
    if (!Array.isArray(data)) {
      data = [data];
    }
    for (key in data) {
      if (!__hasProp.call(data, key)) continue;
      value = data[key];
      request = store.put(value);
      request.onerror = function(e) {
        console.log("Error: Indexed DB Insert request; Error-Code = " + e.target.errorCode);
      };
      request.onsuccess = function(e) {};
    }
    my.select();
  };
  self.indexeddb.select = function() {
    var common, db, index, my, store, trans;
    my = self.indexeddb;
    common = my.config.common;
    db = common.db;
    trans = db.transaction(["items"], "readwrite");
    store = trans.objectStore("items");
    index = store.index("tag");
    index.getKey("").onsuccess = function(e) {};
  };
};

Hydranger(["*"], function(self) {
  self.onload(self.autoload.init);
});
